Index: DealershipICS/src/main/java/company/gui/AppStateManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package company.gui;\r\n\r\nimport javafiles.Key;\r\nimport javafiles.customexceptions.*;\r\nimport javafiles.dataaccessfiles.FileIO;\r\nimport javafiles.dataaccessfiles.FileIOBuilder;\r\nimport javafiles.domainfiles.Company;\r\nimport javafiles.domainfiles.Dealership;\r\nimport javafiles.domainfiles.Vehicle;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.Set;\r\nimport java.util.HashSet;\r\nimport java.util.stream.Collectors;\r\n\r\n\r\n/**\r\n * Manages the application's state, specifically the Company instance and its data.\r\n * This class provides static methods to initialize, access, and modify the Company object,\r\n * as well as retrieve data related to the company's inventory and dealerships.\r\n */\r\npublic class AppStateManager {\r\n\r\n    private static String masterInventoryList = \"masterInventoryList.json\";\r\n    private static Company company;\r\n\r\n    /**\r\n     * Private constructor to prevent instantiation of this utility class.\r\n     */\r\n    private AppStateManager() {}\r\n\r\n    /**\r\n     * Initializes the Company instance with the provided Company object.\r\n     * If the Company instance already exists, this method will not overwrite it.\r\n     *\r\n     * @param newCompany The Company object to initialize the application state with.\r\n     */\r\n    public static void initializeCompany(Company newCompany)\r\n    {\r\n        if (company == null)\r\n        {\r\n            company = newCompany;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retrieves the current Company instance.\r\n     *\r\n     * @return The Company object representing the application's state.\r\n     */\r\n    public static Company getCompany()\r\n    {\r\n        return company;\r\n    }\r\n\r\n    /**\r\n     * Retrieves a List of Maps representing all vehicle data within the Company instance.\r\n     * </p>\r\n     * Each Map contains key-value pairs representing vehicle attributes.\r\n     * Method calls {@link Company#getDataMap()}.\r\n     *\r\n     * @return A List of Maps containing vehicle data.\r\n     */\r\n    public static List<Map<Key, Object>> getCompanyData()\r\n    {\r\n        return company.getDataMap();\r\n    }\r\n\r\n    /**\r\n     * Retrieves a List of Dealership objects associated with the Company instance.\r\n     * </p>\r\n     * Method calls {@link Company#getListDealerships()}.\r\n     *\r\n     * @return A List of Dealership objects.\r\n     */\r\n    public static ArrayList<Dealership> getListDealerships()\r\n    {\r\n        return company.getListDealerships();\r\n    }\r\n\r\n\r\n    /**\r\n     * Retrieves a comprehensive list of all vehicles owned by the company, aggregated from all dealerships.\r\n     *\r\n     * @return An ArrayList of Vehicle objects representing all vehicles owned by the company.\r\n     */\r\n    public static ArrayList<Vehicle> getListCompanyVehicles()\r\n    {\r\n        ArrayList<Vehicle> companyListVehicles = new ArrayList<>();\r\n\r\n        ArrayList<Dealership> listDealerships = company.getListDealerships();\r\n\r\n        for (Dealership dealership : listDealerships)\r\n        {\r\n            companyListVehicles.addAll(getDealershipCompleteInventory(dealership.getDealerId()));\r\n\r\n        }\r\n\r\n        return companyListVehicles;\r\n    }\r\n\r\n    /**\r\n     * Adds a Dealership object to the Company instance.\r\n     * </p>\r\n     * Method calls {@link Company#addDealership(Dealership)}\r\n     * \r\n     *\r\n     * @param dealership The Dealership object to add to the Company.\r\n     */\r\n    public static void addADealership(Dealership dealership)\r\n    {\r\n        company.addDealership(dealership);\r\n    }\r\n\r\n    public static List<Map<Key, Object>> dataToInventory(List<Map<Key, Object>> maps) {\r\n        return company.dataToInventory(maps);\r\n    }\r\n\r\n    protected static List<Map<Key, Object>> loadInitialFiles() {\r\n        try {\r\n            FileIO fileIO = FileIOBuilder.buildNewFileIO(masterInventoryList, 'r');\r\n            return company.dataToInventory(fileIO.readInventory());\r\n        } catch (ReadWriteException e) {\r\n            System.out.println(e.getMessage());\r\n            return new ArrayList<>();\r\n        }\r\n    }\r\n\r\n    protected static void writeToInventory() {\r\n        List<Map<Key, Object>> data = company.getDataMap();\r\n        try {\r\n            FileIO fileIO = FileIOBuilder.buildNewFileIO(masterInventoryList, 'w');\r\n            fileIO.writeInventory(data);\r\n        } catch (ReadWriteException e) {\r\n            System.out.println(\"Inventory could not be loaded.\");\r\n        }\r\n    }\r\n\r\n    public static ArrayList<String> getDealershipIDs()\r\n    {\r\n        return company.getAllDealershipIds();\r\n    }\r\n\r\n\r\n    /**\r\n     * Retrieves a list of dealership IDs that currently have renting enabled.\r\n     *\r\n     * @return A list of dealership IDs that are currently renting enabled.\r\n     */\r\n    public static List<String> getRentingEnabledDealershipIDs()\r\n    {\r\n        return company.getListDealerships().stream()\r\n                .filter(dealership -> company.isDealershipRentingEnabled(dealership.getDealerId()))\r\n                .map(Dealership::getDealerId)\r\n                .collect(Collectors.toList());\r\n    }\r\n\r\n\r\n\r\n\r\n    /**\r\n     * Retrieves a List of DealershipRow objects representing dealership data.\r\n     * </p>\r\n     * This method fetches dealership information from the Company instance using\r\n     * {@link Company#getDealershipInfoList()} and converts it into a List of\r\n     * {@link ProfileManagementController.DealershipRow} objects.\r\n     *\r\n     * @return A List of {@link ProfileManagementController.DealershipRow} objects containing\r\n     *         dealership data such as ID, name, receiving status, and renting status.\r\n     */\r\n    public static List<ProfileManagementController.DealershipRow> getDealershipRows() {\r\n        List<Map<String, Object>> dealershipInfoList = company.getDealershipInfoList();\r\n        List<ProfileManagementController.DealershipRow> dealershipRows = new ArrayList<>();\r\n        Set<String> existingIds = new HashSet<>();\r\n\r\n        for (Map<String, Object> info : dealershipInfoList) {\r\n            String id = (String) info.get(\"id\");\r\n            String name = (String) info.get(\"name\");\r\n            Boolean receivingEnabled = (Boolean) info.get(\"receivingEnabled\");\r\n            Boolean rentingEnabled = (Boolean) info.get(\"rentingEnabled\");\r\n\r\n            // Check if the ID already exists\r\n            if (!existingIds.contains(id)) {\r\n                dealershipRows.add(new ProfileManagementController.DealershipRow(id, name, receivingEnabled, rentingEnabled));\r\n                existingIds.add(id);\r\n            } \r\n        }\r\n        return dealershipRows;\r\n    }\r\n\r\n\r\n\r\n\r\n    /**\r\n     * Manually adds a vehicle to a dealership's inventory.\r\n     * This method locates the specified dealership, validates the vehicle data,\r\n     * and adds the vehicle to the dealership's inventory.\r\n     *\r\n     * @param dealershipID      The ID of the dealership to add the vehicle to.\r\n     * @param vehicleID         The unique ID of the vehicle.\r\n     * @param vehicleManufacturer The manufacturer of the vehicle.\r\n     * @param vehicleModel      The model of the vehicle.\r\n     * @param vehiclePrice      The price of the vehicle.\r\n     * @param acquisitionDate   The acquisition date of the vehicle.\r\n     * @param vehicleType       The type of the vehicle.\r\n     * @param priceUnit         The unit of the price.\r\n     * @throws VehicleAlreadyExistsException       If a vehicle with the same ID already exists in the dealership's inventory.\r\n     * @throws InvalidPriceException              If the vehicle price is invalid.\r\n     * @throws DealershipNotAcceptingVehiclesException If the dealership is not accepting vehicles.\r\n     * @throws InvalidVehicleTypeException         If the vehicle type is invalid.\r\n     * @throws IllegalArgumentException            If the dealership ID is not found.\r\n     */\r\n    public static void manualVehicleAdd(String dealershipID, String vehicleID, String vehicleManufacturer, String vehicleModel, Long vehiclePrice, Long acquisitionDate, String vehicleType, String priceUnit)\r\n            throws VehicleAlreadyExistsException, InvalidPriceException, DealershipNotAcceptingVehiclesException,\r\n            InvalidVehicleTypeException {\r\n\r\n        Dealership dealership = company.findDealership(dealershipID);\r\n        if (dealership == null) {\r\n            throw new IllegalArgumentException(\"Dealership ID not found: \" + dealershipID);\r\n        }\r\n\r\n        dealership.manualVehicleAdd(vehicleID, vehicleManufacturer, vehicleModel, vehiclePrice, acquisitionDate, vehicleType,priceUnit);\r\n    }\r\n\r\n\r\n    /**\r\n        Sets receiving status for a {@link Dealership} in the company.\r\n        Method calls {@link Dealership#setReceivingVehicle(Boolean)}\r\n     */\r\n    public static void setDealershipReceivingStatus(Dealership dealership,boolean status)\r\n    {\r\n        dealership.setReceivingVehicle(status);\r\n    }\r\n\r\n    /**\r\n     Sets rental status for a {@link Dealership} in the company.\r\n     Method calls {@link Dealership#setRentingVehicles(Boolean)}\r\n     */\r\n    public static void setDealershipRentalStatus(Dealership dealership,boolean status)\r\n    {\r\n        dealership.setRentingVehicles(status);\r\n    }\r\n\r\n    /**\r\n     * Updates the rental status of a vehicle within a dealership and moves it between\r\n     * the dealership's sales and rental inventories based on the updated rental status.\r\n     * </p>\r\n     * \r\n     * mwethod calls {@link Company#updateVehicleRental(String, Vehicle)}\r\n     *\r\n    */\r\n    public static void updateDealershipVehicleRentalState(String dealershipid, Vehicle vehicleToUpdate) throws\r\n            VehicleAlreadyExistsException, DealershipNotRentingException, VehicleNotRentableException,\r\n            DealershipNotAcceptingVehiclesException\r\n    {\r\n        company.updateVehicleRental(dealershipid, vehicleToUpdate);\r\n    }\r\n\r\n\r\n    /**\r\n     * Takes a String representing a Dealership ID and returns {@link Dealership}\r\n     * with matching ID in the company.\r\n     * </p>\r\n     * Method calls {@link Company#findDealership(String)}.\r\n     *\r\n     * @param dealerId A String equal to the dealerID of the Dealership we are searching for.\r\n     * @return The Dealership we are searching for in listDealerships (null if absent).\r\n     */\r\n    public static Dealership findADealership(String dealerId)\r\n    {\r\n       return company.findDealership(dealerId);\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * Gets the complete inventory of a given dealership.\r\n     * Method calls {@link Company#getDealershipCompleteInventory(String)}.\r\n     *\r\n     * @param dealershipId dealership ID of target dealership\r\n     * @return ArrayList<Vehicle> represent a complete collection of target dealership's sales and rental inventory\r\n     */\r\n    public static ArrayList<Vehicle> getDealershipCompleteInventory(String dealershipId)\r\n    {\r\n        return company.getDealershipCompleteInventory(dealershipId);\r\n    }\r\n\r\n\r\n    /**\r\n     * Removes target {@link Vehicle} from a {@link Dealership} inventory.\r\n     * Method calls {@link Company#removeVehicleFromDealership(String, Vehicle)} \r\n     *\r\n     * @param dealershipId target dealership to remove vehicle from\r\n     * @param targetVehicle vehicle to be removed\r\n     * @throws EmptyInventoryException if target dealership's inventory is empty\r\n     * @throws IllegalArgumentException if target vehicle is null\r\n     */\r\n    public static void removeVehicleFromDealership(String dealershipId,Vehicle targetVehicle) throws IllegalArgumentException\r\n    {\r\n        company.removeVehicleFromDealership(dealershipId,targetVehicle);\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/DealershipICS/src/main/java/company/gui/AppStateManager.java b/DealershipICS/src/main/java/company/gui/AppStateManager.java
--- a/DealershipICS/src/main/java/company/gui/AppStateManager.java	(revision 4ac1c2990110fbc613c03565572d445952a2b1dd)
+++ b/DealershipICS/src/main/java/company/gui/AppStateManager.java	(date 1742947316700)
@@ -114,6 +114,25 @@
         company.addDealership(dealership);
     }
 
+    /**
+     * Transfers a vehicle from one dealership's inventory to another.
+     * </p>
+     * Calls {@link Company#dealershipVehicleTransfer(String, String, Vehicle)}.
+     *
+     * @param senderId        The ID of the dealership sending the vehicle.
+     * @param receiverId      The ID of the dealership receiving the vehicle.
+     * @param transferVehicle The vehicle to be transferred.
+     * @throws VehicleAlreadyExistsException       If the receiving dealership already has the vehicle in its inventory.
+     * @throws DealershipNotAcceptingVehiclesException If the receiving dealership is not accepting vehicles.
+     * @throws DuplicateSenderException            If the sender and receiver dealership IDs are the same.
+     */
+    public static void transferVehicle(String senderId, String receiverId, Vehicle transferVehicle) throws
+            VehicleAlreadyExistsException, DealershipNotAcceptingVehiclesException, DuplicateSenderException
+    {
+        company.dealershipVehicleTransfer(senderId,receiverId,transferVehicle);
+    }
+
+
     public static List<Map<Key, Object>> dataToInventory(List<Map<Key, Object>> maps) {
         return company.dataToInventory(maps);
     }
Index: DealershipICS/src/main/java/javafiles/domainfiles/Company.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package javafiles.domainfiles;\r\n\r\nimport javafiles.Key;\r\nimport javafiles.customexceptions.*;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\npublic class Company {\r\n    private ArrayList<Dealership> listDealerships;\r\n\r\n    public Company() {\r\n        this.listDealerships = new ArrayList<>();\r\n    }\r\n\r\n    public void addDealership(Dealership dealership) {listDealerships.add(dealership);}\r\n\r\n    public ArrayList<Dealership> getListDealerships() {return listDealerships;}\r\n\r\n    /**\r\n     * Takes a String representing a Dealership ID and returns the index of that\r\n     * Dealership in this Company's listDealerships.\r\n     *\r\n     * @param dealerId A String equal to the dealerId of the Dealership we are searching for.\r\n     * @return The index of the searched for Dealership in listDealerships (-1 if absent).\r\n     */\r\n    public int getDealershipIndex(String dealerId) {\r\n        Dealership dealership;\r\n        for (int i = 0; i < listDealerships.size(); i++) {\r\n            dealership = listDealerships.get(i);\r\n            if (dealership.getDealerId().equals(dealerId)) {\r\n                return i;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    /**\r\n     * Takes a String representing a Dealership ID and returns the given\r\n     * Dealership in this Company's listDealerships.\r\n     *\r\n     * @param dealerId A String equal to the dealerID of the target Dealership.\r\n     * @return The Dealership target dealership (null if absent).\r\n     */\r\n    public Dealership findDealership(String dealerId) {\r\n        for (Dealership dealership : listDealerships) {\r\n            if (dealership.getDealerId().equals(dealerId)) {\r\n                return dealership;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n\r\n    /**\r\n     * Checks if a dealership with the given ID has renting services enabled.\r\n     *\r\n     * @param dealershipId The ID of the dealership to check.\r\n     * @return true if the dealership has renting enabled, false otherwise.\r\n     */\r\n    public boolean isDealershipRentingEnabled(String dealershipId) {\r\n        Dealership dealership = findDealership(dealershipId);\r\n        if (dealership != null) {\r\n            return dealership.getRentingVehicles();\r\n        }\r\n        return false; // Dealership not found, or renting is disabled.\r\n    }\r\n\r\n    /**\r\n     * Gets the complete inventory of a target dealership in company object.\r\n     * Method calls {@link Dealership#getTotalInventory()}.\r\n     *\r\n     * @param dealershipId dealership ID of target dealership\r\n     * @return a total collection of target dealership's sales and rental inventory\r\n     */\r\n    public ArrayList <Vehicle> getDealershipCompleteInventory(String dealershipId)\r\n    {\r\n        Dealership dealership = findDealership(dealershipId);\r\n        return dealership.getTotalInventory();\r\n    }\r\n\r\n\r\n    /**\r\n     * Updates the rental status of a vehicle within a dealership and moves it between\r\n     * the dealership's sales and rental inventories based on the updated rental status.\r\n     *\r\n     * @param dealershipid The ID of the dealership containing the vehicle to update.\r\n     * @param vehicle       The vehicle object with the updated rental status. This is the same vehicle object that\r\n     * is present in the dealership's inventory (either sales or rental).\r\n     * @throws VehicleAlreadyExistsException       If the vehicle already exists in the destination inventory.\r\n     * @throws DealershipNotRentingException       If the dealership is not currently renting vehicles.\r\n     * @throws VehicleNotRentableException         If the vehicle is a sports car, which is not rentable.\r\n     * @throws DealershipNotAcceptingVehiclesException If the dealership is not accepting new vehicles into sales inventory.\r\n     */\r\n    public void updateVehicleRental(String dealershipid, Vehicle vehicle)\r\n            throws VehicleAlreadyExistsException, DealershipNotRentingException,\r\n            VehicleNotRentableException, DealershipNotAcceptingVehiclesException {\r\n\r\n        Dealership dealership = findDealership(dealershipid);\r\n\r\n        // Update the vehicle's rental status\r\n        if (!vehicle.getVehicleType().equalsIgnoreCase(\"Sports car\")) {\r\n            vehicle.setRental(!vehicle.getRentalStatus());\r\n        }\r\n\r\n        else {\r\n            throw new VehicleNotRentableException(\"Sports car types are not currently rentable\");\r\n        }\r\n\r\n        // Remove from the source inventory and add vehicle to opposite inventory\r\n        if (dealership.getSaleVehicles().contains(vehicle)) {\r\n            dealership.getSaleVehicles().remove(vehicle);\r\n            dealership.getRentalVehicles().add(vehicle);\r\n        } else {\r\n            dealership.getRentalVehicles().remove(vehicle);\r\n            dealership.getSaleVehicles().add(vehicle);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Removes target {@link Vehicle} from a {@link Dealership} inventory.\r\n     * Method calls {@link Dealership#removeVehicleFromInventory(Vehicle)}.\r\n     *\r\n     * @param dealershipId target dealership to remove vehicle from\r\n     * @param targetVehicle vehicle to be removed\r\n     * @throws EmptyInventoryException if target dealership's inventory is empty\r\n     * @throws IllegalArgumentException if target vehicle is null\r\n     */\r\n    public void removeVehicleFromDealership(String dealershipId,Vehicle targetVehicle) throws  IllegalArgumentException{\r\n        Dealership dealership = this.findDealership(dealershipId);\r\n        dealership.removeVehicleFromInventory(targetVehicle);\r\n    }\r\n\r\n\r\n    /**\r\n     * Takes a List of Map<Key, Object>s representing a List of Vehicle information\r\n     * and writes the data in each map to the corresponding Dealership.\r\n     *\r\n     * @param data The List of Maps containing Vehicle information to be added to inventory.\r\n     */\r\n    public List<Map<Key, Object>> dataToInventory(List<Map<Key, Object>> data) {\r\n        List<Map<Key, Object>> badInventoryMaps = new ArrayList<>();\r\n\r\n        if (data == null) {return badInventoryMaps;}\r\n\r\n        // Used to ensure that the cars for new Dealerships are\r\n        // added before considering rental or receiving statuses.\r\n        // Assumes that all Vehicles from the same dealership have\r\n        // the same rental and receiving statuses.\r\n        Map<Dealership, Map<Key, Object>> newDealershipStat = new HashMap<>();\r\n\r\n        for (Map<Key, Object> map: data) {\r\n            if (map.containsKey(Key.REASON_FOR_ERROR)) {\r\n                badInventoryMaps.add(map);\r\n                continue;\r\n            }\r\n\r\n            String id = Key.DEALERSHIP_ID.getVal(map, String.class);\r\n            String name = Key.DEALERSHIP_NAME.getVal(map, String.class);\r\n\r\n            if (id == null) {\r\n                Key.REASON_FOR_ERROR.putNonNull(map, \"No dealerID.\");\r\n                badInventoryMaps.add(map);\r\n                continue;\r\n            }\r\n\r\n            Dealership dealership = findDealership(id);\r\n            if (dealership == null) {\r\n                dealership = new Dealership(id, name);\r\n                addDealership(dealership);\r\n\r\n                newDealershipStat.put(dealership, map);\r\n            }\r\n            if ( !dealership.dataToInventory(map) ) {\r\n                badInventoryMaps.add(map);\r\n            }\r\n        }\r\n\r\n        for (Dealership dealership : newDealershipStat.keySet()) {\r\n            Map<Key, Object> map = newDealershipStat.get(dealership);\r\n            dealership.setReceivingVehicle(Key.DEALERSHIP_RECEIVING_STATUS.getVal(map, Boolean.class));\r\n            dealership.setRentingVehicles(Key.DEALERSHIP_RENTING_STATUS.getVal(map, Boolean.class));\r\n        }\r\n\r\n        return badInventoryMaps;\r\n    }\r\n\r\n    /**\r\n     * Retrieves Vehicle data for all Dealerships within the Company.\r\n     * <p>\r\n     * This method gathers Vehicle information from all Dealerships associated with the\r\n     * Company and compiles it into a single list of Maps. Each Map in the List\r\n     * represents a Vehicle and contains its attributes.\r\n     *\r\n     * @return A {@link List} of {@link Map} Objects. Each {@link Map} represents a Vehicle\r\n     *         and contains its attributes (dealership ID, vehicle type, manufacturer, model,\r\n     *         vehicle ID, price, and acquisition date) as key-value pairs. Returns all vehicles from each\r\n     *         Dealership in the Company. Returns an empty list if the Company has no Dealerships\r\n     *         or if none of the Dealerships have any Vehicles.\r\n     */\r\n    public List<Map<Key, Object>> getDataMap() {\r\n        List<Map<Key, Object>> list = new ArrayList<>();\r\n        for (Dealership dealership : listDealerships) {\r\n            list.addAll(dealership.getDataMap());\r\n        }\r\n        return list;\r\n    }\r\n\r\n    /**\r\n     * Prints the inventory of Vehicles for each Dealership in the Company.\r\n     * <p>\r\n     * This method iterates through the List of Dealerships associated in the Company.\r\n     * For each {@link Dealership} it retrieves the Vehicle inventory and prints\r\n     * information about each {@link Vehicle}. If a Dealership has no inventory, a message\r\n     * indicating this is printed. If the Company has no Dealerships, a message is\r\n     * printed to the console.\r\n     */\r\n    public void printInventory() {\r\n        // if company does not have any dealerships, print message and return to menu\r\n        if(listDealerships.isEmpty())\r\n        {\r\n            System.out.println(\"There are currently no dealerships in the company\");\r\n            return;\r\n        }\r\n\r\n        for(Dealership dealership : listDealerships)\r\n        {\r\n            System.out.println(dealership.toFullString());\r\n        }\r\n    }\r\n\r\n    //TODO: Decide whether we need this method still called in javafiles.Main\r\n    /**\r\n     * Generates a formatted list of Dealership IDs.\r\n     * <p>\r\n     * This method retrieves all Dealerships associated with the Company and\r\n     * creates a String containing their IDs, separated by tabs. The IDs are arranged\r\n     * with a maximum of 6 IDs per line. If the Company has no Dealerships,\r\n     * the method returns a message indicating this.\r\n     *\r\n     * @return A string containing the formatted list of dealership IDs, or the\r\n     *         message \"No valid Dealerships.\" if the company has no dealerships.\r\n     */\r\n    public String getDealershipIdList() {\r\n        StringBuilder output = new StringBuilder();\r\n        int added = 0;\r\n        int idPerLine = 6;\r\n        for (Dealership dealership : listDealerships) {\r\n            output.append(dealership.getDealerId()).append(\"\\t\");\r\n            if (added % idPerLine == idPerLine - 1) {\r\n                output.append(\"\\n\");\r\n            }\r\n            added++;\r\n        }\r\n        if (output.isEmpty()) {\r\n            return \"No valid Dealerships.\";\r\n        }\r\n        return output.toString();\r\n    }\r\n\r\n    /**\r\n     * Returns an ArrayList of Strings representing all Dealership IDs in the company.\r\n     *\r\n     * @return An ArrayList of Strings containing all Dealership IDs.\r\n     */\r\n    public ArrayList<String> getAllDealershipIds() {\r\n        ArrayList<String> dealershipIds = new ArrayList<>();\r\n        for (Dealership dealership : listDealerships) {\r\n            dealershipIds.add(dealership.getDealerId());\r\n        }\r\n        return dealershipIds;\r\n    }\r\n\r\n    public List<Map<String, Object>> getDealershipInfoList() {\r\n        List<Map<String, Object>> dealershipInfoList = new ArrayList<>();\r\n        for (Dealership dealership : listDealerships) {\r\n            Map<String, Object> dealershipInfo = new HashMap<>();\r\n            dealershipInfo.put(\"id\", dealership.getDealerId());\r\n            dealershipInfo.put(\"name\", dealership.getDealerName());\r\n            dealershipInfo.put(\"receivingEnabled\", dealership.getStatusAcquiringVehicle());\r\n            dealershipInfo.put(\"rentingEnabled\", dealership.getRentingVehicles());\r\n            dealershipInfoList.add(dealershipInfo);\r\n        }\r\n        return dealershipInfoList;\r\n    }\r\n\r\n    /**\r\n     * Returns a String displaying the current receiving status of the\r\n     * Dealership at index dealerIndex in listDealerships.\r\n     *\r\n     * @param dealerIndex The index of the dealership that is being evaluated\r\n     * @return A String displaying the receiving status of the Dealership.\r\n     */\r\n    public String changeReceivingStatusIntroString(int dealerIndex) {\r\n        Dealership dealer = listDealerships.get(dealerIndex);\r\n        return \"Enable or disable vehicle receiving status for dealership \"\r\n                + dealer.getDealerId() + \"? (Enter 'enable' or 'disable')\\n\" +\r\n                \"Currently enabled? (\" + dealer.getStatusAcquiringVehicle() + \")\";\r\n    }\r\n\r\n    /**\r\n     * Updates the Dealership receiving status for Vehicles and prints the appropriate\r\n     * message for that update based on what the userInput read from the user.\r\n     *\r\n     * @param dealerIndex The index of the Dealership to be updated in listDealerships.\r\n     * @param userInput The input provided by the user that is being processed.\r\n     * @return Whether the input is invalid, true if it is invalid, false otherwise.\r\n     */\r\n    public boolean changeReceivingStatus(int dealerIndex, String userInput) {\r\n        Dealership dealer = listDealerships.get(dealerIndex);\r\n        if (userInput.equalsIgnoreCase(\"enable\")) {\r\n            // Check if the dealership's vehicle receiving status is already enabled\r\n            if (dealer.getStatusAcquiringVehicle()) {\r\n                System.out.println(\"Dealership \" + dealer.getDealerId() + \" is already set to receive vehicles.\");\r\n            } else {\r\n                // Enable vehicle receiving for the dealership\r\n                dealer.setReceivingVehicle(true);\r\n                System.out.println(\"Vehicle receiving status for dealership \" + dealer.getDealerId() + \" has been enabled.\");\r\n            }\r\n            return false;\r\n        } else if (userInput.equalsIgnoreCase(\"disable\")) {\r\n            // Disable the vehicle receiving status\r\n            if (!dealer.getStatusAcquiringVehicle()) {\r\n                System.out.println(\"Dealership \" + dealer.getDealerId() + \" is already set to not receive vehicles.\");\r\n            } else {\r\n                dealer.setReceivingVehicle(false);\r\n                System.out.println(\"Vehicle receiving status for dealership \" + dealer.getDealerId() + \" has been disabled.\");\r\n            }\r\n            return false;\r\n        }\r\n        System.out.println(\"Invalid input. Please enter 'enable' or 'disable'.\");\r\n        return true;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/DealershipICS/src/main/java/javafiles/domainfiles/Company.java b/DealershipICS/src/main/java/javafiles/domainfiles/Company.java
--- a/DealershipICS/src/main/java/javafiles/domainfiles/Company.java	(revision 4ac1c2990110fbc613c03565572d445952a2b1dd)
+++ b/DealershipICS/src/main/java/javafiles/domainfiles/Company.java	(date 1742947246555)
@@ -44,7 +44,7 @@
      * @param dealerId A String equal to the dealerID of the target Dealership.
      * @return The Dealership target dealership (null if absent).
      */
-    public Dealership findDealership(String dealerId) {
+    public Dealership findDealership(String dealerId)  {
         for (Dealership dealership : listDealerships) {
             if (dealership.getDealerId().equals(dealerId)) {
                 return dealership;
@@ -60,7 +60,7 @@
      * @param dealershipId The ID of the dealership to check.
      * @return true if the dealership has renting enabled, false otherwise.
      */
-    public boolean isDealershipRentingEnabled(String dealershipId) {
+    public boolean isDealershipRentingEnabled(String dealershipId){
         Dealership dealership = findDealership(dealershipId);
         if (dealership != null) {
             return dealership.getRentingVehicles();
@@ -75,8 +75,7 @@
      * @param dealershipId dealership ID of target dealership
      * @return a total collection of target dealership's sales and rental inventory
      */
-    public ArrayList <Vehicle> getDealershipCompleteInventory(String dealershipId)
-    {
+    public ArrayList <Vehicle> getDealershipCompleteInventory(String dealershipId){
         Dealership dealership = findDealership(dealershipId);
         return dealership.getTotalInventory();
     }
@@ -134,6 +133,34 @@
         dealership.removeVehicleFromInventory(targetVehicle);
     }
 
+    /**
+     * Transfers a vehicle from one dealership's inventory to another.
+     * </p>
+     * Calls the {@link Dealership#addIncomingVehicle(Vehicle)} method
+     * to add the transfer vehicle to the receving dealership.
+     *
+     * @param senderId        The ID of the dealership sending the vehicle.
+     * @param receiverId      The ID of the dealership receiving the vehicle.
+     * @param transferVehicle The vehicle to be transferred.
+     * @throws DuplicateSenderException         If the sender and receiver dealership IDs are the same.
+     * @throws VehicleAlreadyExistsException    If the receiving dealership already has the vehicle in its inventory.
+     * @throws DealershipNotAcceptingVehiclesException If the receiving dealership is not accepting vehicles.
+     */
+    public void dealershipVehicleTransfer(String senderId, String receiverId, Vehicle transferVehicle)
+            throws DuplicateSenderException, VehicleAlreadyExistsException, DealershipNotAcceptingVehiclesException
+    {
+        Dealership senderDealer = this.findDealership(senderId);
+        Dealership receivingDealer = this.findDealership(receiverId);
+
+        if (senderId.equals(receiverId))
+        {
+            throw new DuplicateSenderException("Sender and receiver dealership can not be the same");
+        }
+
+        senderDealer.removeVehicleFromInventory(transferVehicle);
+        receivingDealer.addIncomingVehicle(transferVehicle);
+    }
+
 
     /**
      * Takes a List of Map<Key, Object>s representing a List of Vehicle information
Index: DealershipICS/src/main/java/company/gui/VehicleTransferController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package company.gui;\r\n\r\npublic class VehicleTransferController {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/DealershipICS/src/main/java/company/gui/VehicleTransferController.java b/DealershipICS/src/main/java/company/gui/VehicleTransferController.java
--- a/DealershipICS/src/main/java/company/gui/VehicleTransferController.java	(revision 4ac1c2990110fbc613c03565572d445952a2b1dd)
+++ b/DealershipICS/src/main/java/company/gui/VehicleTransferController.java	(date 1742947623226)
@@ -1,4 +1,187 @@
 package company.gui;
 
+import javafx.collections.FXCollections;
+import javafx.collections.ObservableList;
+import java.util.ArrayList;
+import java.util.List;
+
+import javafx.event.ActionEvent;
+import javafx.fxml.FXML;
+import javafx.scene.control.Alert;
+import javafx.scene.control.ComboBox;
+import javafx.scene.control.TableColumn;
+import javafx.scene.control.TableView;
+import javafx.scene.control.cell.PropertyValueFactory;
+
+import javafiles.domainfiles.Vehicle;
+
+import javafiles.customexceptions.*;
+import java.io.IOException;
+
+import static company.gui.FXMLPath.INVENTORY_SCREEN;
+
+/**
+ * Controller for the Vehicle Transfer screen, handling vehicle transfer operations between dealerships.
+ */
 public class VehicleTransferController {
-}
+
+    @FXML
+    private ComboBox<String> senderComboBox;
+
+    @FXML
+    private ComboBox<String> receiverComboBox;
+
+    @FXML
+    private TableView<Vehicle> vehicleTable;
+
+    @FXML
+    private TableColumn<Vehicle, String> vehicleIdColumn;
+
+    @FXML
+    private TableColumn<Vehicle, Boolean> rentalColumn;
+
+    @FXML
+    private TableColumn<Vehicle, Long> vehicleTypeColumn;
+
+    @FXML
+    private TableColumn<Vehicle, String> vehicleManufacturerColumn;
+
+    @FXML
+    private TableColumn<Vehicle, String> vehicleModelColumn;
+
+    @FXML
+    private TableColumn<Vehicle, Double> vehiclePriceColum;
+
+    @FXML
+    private TableColumn<Vehicle, String> priceUnitColumn;
+
+    @FXML
+    private TableColumn<Vehicle, String> acquisitionDateColumn;
+
+    private Vehicle selectedVehicle;
+
+    /**
+     * Initializes the controller, populating combo boxes and setting up table columns.
+     */
+    @FXML
+    public void initialize() {
+        // Populate sender and receiver combo boxes with all dealerships
+        List<String> dealershipIDs = AppStateManager.getDealershipIDs();
+        senderComboBox.setItems(FXCollections.observableArrayList(dealershipIDs));
+        receiverComboBox.setItems(FXCollections.observableArrayList(dealershipIDs));
+
+        // Set up table columns
+        vehicleIdColumn.setCellValueFactory(new PropertyValueFactory<>("vehicleId"));
+        rentalColumn.setCellValueFactory(new PropertyValueFactory<>("rentalStatus"));
+        vehicleTypeColumn.setCellValueFactory(new PropertyValueFactory<>("vehicleType"));
+        vehicleManufacturerColumn.setCellValueFactory(new PropertyValueFactory<>("vehicleManufacturer"));
+        vehicleModelColumn.setCellValueFactory(new PropertyValueFactory<>("vehicleModel"));
+        vehiclePriceColum.setCellValueFactory(new PropertyValueFactory<>("vehiclePrice"));
+        priceUnitColumn.setCellValueFactory(new PropertyValueFactory<>("priceUnit"));
+        acquisitionDateColumn.setCellValueFactory(new PropertyValueFactory<>("formattedAcquisitionDate"));
+
+        // Add a listener to the selected item in the table
+        vehicleTable.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -> {
+            if (newValue != null) {
+                selectedVehicle = newValue;
+            }
+        });
+
+        // Add listeners to combo boxes to update the table when a new dealership is selected.
+        senderComboBox.setOnAction(this::handleSenderSelection);
+    }
+
+    /**
+     * Handles the "Back" button action, switching to the inventory screen.
+     *
+     * @param event The action event.
+     * @throws IOException If an I/O error occurs.
+     */
+    @FXML
+    private void handleBack(ActionEvent event) throws IOException {
+        SceneManager sceneManager = SceneManager.getInstance(null);
+        sceneManager.switchScene(INVENTORY_SCREEN);
+    }
+
+    /**
+     * Handles the "Transfer" button action, transferring the selected vehicle between dealerships.
+     *
+     * @param event The action event.
+     */
+    @FXML
+    private void handleTransferVehicle(ActionEvent event) {
+        String senderDealershipId = senderComboBox.getValue();
+        String receiverDealershipId = receiverComboBox.getValue();
+
+        if (senderDealershipId == null || receiverDealershipId == null) {
+            showAlert("Please select both sender and receiver dealerships.");
+            return;
+        }
+
+        if (selectedVehicle == null) {
+            showAlert("Please select a vehicle to transfer.");
+            return;
+        }
+
+        try {
+            AppStateManager.transferVehicle(senderDealershipId, receiverDealershipId, selectedVehicle);
+            showAlert("Vehicle " + selectedVehicle.getVehicleId() + " transferred successfully to " + receiverDealershipId + ".");
+            updateVehicleTable(senderDealershipId); // Refresh the table
+        } catch ( VehicleNotFoundException | VehicleAlreadyExistsException |
+                 DealershipNotAcceptingVehiclesException | DuplicateSenderException e) {
+            showAlert(e.getMessage());
+        }
+
+    }
+
+    /**
+     * Handles the sender dealership selection event, updating the vehicle table and receiver combo box options.
+     *
+     * @param event The action event.
+     */
+    @FXML
+    private void handleSenderSelection(ActionEvent event) {
+        String senderDealershipId = senderComboBox.getValue();
+        if (senderDealershipId != null) {
+            updateVehicleTable(senderDealershipId);
+            updateReceiverComboBoxOptions(senderDealershipId);
+        }
+    }
+
+    /**
+     * Updates the vehicle table with the inventory of the selected dealership.
+     *
+     * @param dealershipId The ID of the dealership to display vehicles from.
+     */
+    private void updateVehicleTable(String dealershipId) {
+        ObservableList<Vehicle> vehicleData = FXCollections.observableArrayList(AppStateManager.getDealershipCompleteInventory(dealershipId));
+        vehicleTable.setItems(vehicleData);
+    }
+
+    /**
+     * Updates the receiver combo box options, removing the selected sender dealership.
+     *
+     * @param senderDealershipId The ID of the sender dealership.
+     */
+    private void updateReceiverComboBoxOptions(String senderDealershipId) {
+        List<String> allDealershipIDs = AppStateManager.getDealershipIDs();
+        List<String> receiverOptions = new ArrayList<>(allDealershipIDs);
+        receiverOptions.remove(senderDealershipId); // Remove the sender's ID
+
+        ObservableList<String> receiverObservableList = FXCollections.observableArrayList(receiverOptions);
+        receiverComboBox.setItems(receiverObservableList);
+    }
+
+    /**
+     * Displays an alert dialog with the given message.
+     *
+     * @param message The message to display in the alert.
+     */
+    private void showAlert(String message) {
+        Alert alert = new Alert(Alert.AlertType.INFORMATION);
+        alert.setTitle("Information");
+        alert.setHeaderText(null);
+        alert.setContentText(message);
+        alert.showAndWait();
+    }
+}
\ No newline at end of file
Index: DealershipICS/src/main/java/javafiles/customexceptions/DuplicateSenderException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/DealershipICS/src/main/java/javafiles/customexceptions/DuplicateSenderException.java b/DealershipICS/src/main/java/javafiles/customexceptions/DuplicateSenderException.java
new file mode 100644
--- /dev/null	(date 1742945782014)
+++ b/DealershipICS/src/main/java/javafiles/customexceptions/DuplicateSenderException.java	(date 1742945782014)
@@ -0,0 +1,17 @@
+package javafiles.customexceptions;
+
+/**
+ * Exception class representing the error for when a dealership is attempting to transfer
+ * vehicles to itself.
+ */
+public class DuplicateSenderException extends Exception
+{
+    /**
+     * Constructs a new DuplicateSenderException with the specified detail message.
+     *
+     * @param message the detail message. The detail message is saved for later retrieval by the {@link #getMessage()} method.
+     */
+    public DuplicateSenderException(String message) {
+        super(message);
+    }
+}
Index: DealershipICS/src/main/java/company/gui/InventoryScreenController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package company.gui;\r\n\r\n\r\nimport javafx.fxml.FXML;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.scene.control.Button;\r\n\r\n\r\nimport java.io.IOException;\r\n\r\nimport static company.gui.FXMLPath.*;\r\n\r\n\r\n\r\n/**\r\n * Controller for the inventory management screen.\r\n * Handles actions related to vehicle inventory.\r\n */\r\npublic class InventoryScreenController\r\n{\r\n\r\n\r\n    public Button btnChangeRental;\r\n    public Button btnTransferVehicle;\r\n    public Button btnRemoveVehicle;\r\n    public Button btnAddVehicle;\r\n    public Button btnViewInventory;\r\n\r\n    @FXML\r\n    private void handleBack(ActionEvent event) throws IOException\r\n        {\r\n            SceneManager sceneManager = SceneManager.getInstance(null);\r\n            sceneManager.switchScene(MAIN_SCREEN);\r\n\r\n        }\r\n\r\n    @FXML\r\n    private void handleAddVehicleToDealership(ActionEvent event) throws IOException {\r\n        SceneManager sceneManager = SceneManager.getInstance(null);\r\n        sceneManager.switchScene(ADD_INVENTORY);\r\n    }\r\n\r\n    @FXML\r\n    private void handleRemoveVehicleFromDealership() throws IOException {\r\n        SceneManager sceneManager = SceneManager.getInstance(null);\r\n        sceneManager.switchScene(VEHICLE_REMOVAL);\r\n    }\r\n\r\n    @FXML\r\n    private void handleTransferVehicleBetweenDealerships() {\r\n        System.out.println(\"Transfer vehicle clicked\");\r\n    }\r\n\r\n    @FXML\r\n    private void handleChangeVehicleRental() throws IOException {\r\n        SceneManager sceneManager = SceneManager.getInstance(null);\r\n        sceneManager.switchScene(VEHIClE_RENTAL);\r\n    }\r\n\r\n\r\n    @FXML\r\n    private void handleViewCompanyInventory() throws IOException {\r\n        SceneManager sceneManager = SceneManager.getInstance(null);\r\n        sceneManager.switchScene(VIEW_INVENTORY);\r\n    }\r\n\r\n    }\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/DealershipICS/src/main/java/company/gui/InventoryScreenController.java b/DealershipICS/src/main/java/company/gui/InventoryScreenController.java
--- a/DealershipICS/src/main/java/company/gui/InventoryScreenController.java	(revision 4ac1c2990110fbc613c03565572d445952a2b1dd)
+++ b/DealershipICS/src/main/java/company/gui/InventoryScreenController.java	(date 1742945195911)
@@ -47,8 +47,9 @@
     }
 
     @FXML
-    private void handleTransferVehicleBetweenDealerships() {
-        System.out.println("Transfer vehicle clicked");
+    private void handleTransferVehicleBetweenDealerships() throws IOException {
+        SceneManager sceneManager = SceneManager.getInstance(null);
+        sceneManager.switchScene(VEHICLE_TRANSFER);
     }
 
     @FXML
Index: DealershipICS/src/main/java/javafiles/customexceptions/DealershipNotFoundException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/DealershipICS/src/main/java/javafiles/customexceptions/DealershipNotFoundException.java b/DealershipICS/src/main/java/javafiles/customexceptions/DealershipNotFoundException.java
new file mode 100644
--- /dev/null	(date 1742946966538)
+++ b/DealershipICS/src/main/java/javafiles/customexceptions/DealershipNotFoundException.java	(date 1742946966538)
@@ -0,0 +1,17 @@
+package javafiles.customexceptions;
+
+/**
+ * Exception class representing the error for when a dealership can not be
+ * found within a company.
+ */
+public class DealershipNotFoundException extends Exception {
+
+    /**
+     * Constructs a new DealershipNotFoundException with the specified detail message.
+     *
+     * @param message the detail message. The detail message is saved for later retrieval by the {@link #getMessage()} method.
+     */
+    public DealershipNotFoundException(String message) {
+        super(message);
+    }
+}
Index: DealershipICS/src/main/java/company/gui/FXMLPath.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package company.gui;\r\n\r\n/**\r\n * A utility class containing constants for FXML file paths used in the application.\r\n * This class centralizes FXML path definitions to improve maintainability and reduce redundancy.\r\n */\r\nenum FXMLPath {\r\n    MAIN_SCREEN (\"/MainScreen.fxml\", \"Main Menu\"),\r\n    INVENTORY_SCREEN (\"/InventoryScreen.fxml\", \"Inventory Management\"),\r\n    PROFILE_MANAGEMENT (\"/ProfileManagement.fxml\", \"Profile Management\"),\r\n    ADD_INVENTORY (\"/AddInventory.fxml\", \"Add Inventory\"),\r\n    ADD_FROM_FILE (\"/AddFromFile.fxml\",\"Load From File\"),\r\n    VEHICLE_ENTRY (\"/VehicleEntry.fxml\", \"Add Inventory Manually\"),\r\n    VEHIClE_RENTAL (\"/VehicleRental.fxml\", \"Modify Vehicle Rental Status\"),\r\n    VEHICLE_REMOVAL(\"/VehicleRemoval.fxml\", \"Remove Vehicle From Dealership\"),\r\n    VIEW_INVENTORY (\"/ViewInventory.fxml\", \"Company Inventory\");\r\n    // Add other FXML paths as needed\r\n\r\n    private final String PATH;\r\n    private final String SCREEN_TITLE;\r\n    \r\n    FXMLPath(String path, String screenTitle) {\r\n        PATH = path;\r\n        SCREEN_TITLE = screenTitle;\r\n    }\r\n\r\n    public String getPath() {return PATH;}\r\n    public String getScreenTitle() {return SCREEN_TITLE;}\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/DealershipICS/src/main/java/company/gui/FXMLPath.java b/DealershipICS/src/main/java/company/gui/FXMLPath.java
--- a/DealershipICS/src/main/java/company/gui/FXMLPath.java	(revision 4ac1c2990110fbc613c03565572d445952a2b1dd)
+++ b/DealershipICS/src/main/java/company/gui/FXMLPath.java	(date 1742945142713)
@@ -13,7 +13,8 @@
     VEHICLE_ENTRY ("/VehicleEntry.fxml", "Add Inventory Manually"),
     VEHIClE_RENTAL ("/VehicleRental.fxml", "Modify Vehicle Rental Status"),
     VEHICLE_REMOVAL("/VehicleRemoval.fxml", "Remove Vehicle From Dealership"),
-    VIEW_INVENTORY ("/ViewInventory.fxml", "Company Inventory");
+    VIEW_INVENTORY ("/ViewInventory.fxml", "Company Inventory"),
+    VEHICLE_TRANSFER ("/VehicleTransfer.fxml", "Dealership Vehicle Transfer");
     // Add other FXML paths as needed
 
     private final String PATH;
